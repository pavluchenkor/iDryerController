[platformio]

;******************************************************************************
;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;read more https://docs.idryer.org/iDryerV2/Firmware/iDryerController/firmware/
;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;******************************************************************************


;*********** step 1.1 ************
; Connect the Arduino nano
; https://alexgyver.ru/wp-content/uploads/2021/07/usbasp10.jpg

;*********** step 1.2 ************

    ;in terminal
    ;1.1.1  pio run -e fuses -t fuses (enter)
    ;1.1.3  next step

;*********** step 1.3 ************
;copy and run in VSCode terminal
;pio run -e EEP -t uploadeep
;if you hsve Atmega328PB, use
;pio run -e EEPPB -t uploadeep

;*********** step 1.4 ************
;copy and run in VSCode terminal
;pio run -e EEP -t upload
;if you hsve Atmega328PB, use
;pio run -e EEPPB -t upload

;Run and enjoy)

default_envs = EEP

[env]
platform = atmelavr
framework = arduino
board_build.f_cpu = 16000000L
monitor_port = ${env:UART.upload_port}
monitor_speed = 9600
lib_ignore = Wire1
build_flags =     
    -Os
    -g0
    -ffunction-sections
    -fdata-sections
    -Wl,--gc-sections
    -Wl,-s
extra_scripts = 
  post:extra_scripts/show_eeprom_size.py
monitor_port = /dev/tty.usbserial-1430

; pio run -e UART -t fullclean -t upload
[env:UART]
upload_protocol = arduino
board = ATmega328P
upload_port = /dev/tty.usbserial-141340
board_upload.speed = 57600
; board_upload.speed = ${env:fuses_bootloader.board_bootloader.speed}
; board_upload.speed = 115200

; pio run -e EEP -t fullclean -t upload
[env:EEP]
board = ATmega328P
upload_port = usb
upload_protocol = usbasp
upload_flags =
    -C${platformio.packages_dir}/tool-avrdude/avrdude.conf
    -p$BOARD_MCU
    -PUSB
    -cusbasp
upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i
; board_upload.extra_flags = 

; pio run -e EEPPB -t upload
[env:EEPPB]
board = ATmega328P
upload_port = usb
upload_protocol = usbasp
upload_flags =
    -C${platformio.packages_dir}/tool-avrdude/avrdude.conf
    -p$BOARD_MCU
    -F
    -PUSB
    -cusbasp
upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i

; pio run -e fuses -t fuses
[env:fuses]
board = ATmega328P
board_hardware.oscillator = external ; Oscillator type
board_hardware.uart = no_bootloader  ; 
; board_hardware.uart = uart0          ; Set UART to use for serial upload
board_bootloader.speed = 115200      ; Set bootloader baud rate
board_hardware.bod = 4.3v            ; Set brown-out detection 4.3v 2.7v
board_hardware.eesave = yes          ; Preserve EEPROM when uploading using programmer
upload_protocol = usbasp             ; Use the USBasp as programmer   custom   usbasp
upload_flags =                       ; Select USB as upload port and divide the SPI clock by 8
  -v
  -PUSB
  -B8




;********************************************************************
;********************************************************************
; not tested, provided based on forum entries and documentation
;********************************************************************
;********************************************************************

[env:EEParduinoISP]
board = ATmega328P
upload_protocol = stk500v1
upload_flags =
  -C$PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf
  -v 
  -V
  -p$BOARD_MCU
  -stk500v1
  -P$UART.upload_port
  -b19200
upload_command = avrdude $UPLOAD_FLAGS -U eeprom:w:R:$SOURCE:i
board_upload.extra_flags = 

[env:ISP]
upload_protocol = custom
board = ATmega328P
upload_flags =
  -C$PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf
  -p$BOARD_MCU
  -PUSB
  -cusbasp
upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i

[env:Upload_ISP_v2]
; Custom upload procedure
upload_protocol = stk500v1
board = ATmega328P
upload_flags =
  -C$PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf
  -v 
  -V
  -patmega328p
  -cstk500v1
  -P$UART.upload_port
  -b19200
  -e
; Avrdude upload command
upload_command = avrdude $UPLOAD_FLAGS -Uflash:w:$SOURCE:i


[env:Upload_ISP]
board = ATmega328P
upload_protocol = custom              ; Custom upload procedure
upload_flags =                        ; Avrdude upload flags
  -C$PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf
  -p$BOARD_MCU
  -PUSB
  -cusbasp
  -Uflash:w:$SOURCE:i
upload_command = avrdude $UPLOAD_FLAGS ; Avrdude upload command

; pio run -e fuses_bootloader -t fuses
[env:fuses_bootloader]
board = ATmega328P
board_hardware.oscillator = external ; Oscillator type
board_hardware.uart = no_bootloader  ; 
; board_hardware.uart = uart0          ; Set UART to use for serial upload
board_bootloader.speed = 115200      ; Set bootloader baud rate
board_hardware.bod = 4.3v g           ; Set brown-out detection 4.3v
board_hardware.eesave = yes          ; Preserve EEPROM when uploading using programmer
upload_protocol = usbasp             ; Use the USBasp as programmer   custom   usbasp
upload_flags =                       ; Select USB as upload port and divide the SPI clock by 8
  -v
  -PUSB
  -B8

[env:fuses_bootloader_ISP]
board = ATmega328P
board_hardware.oscillator = external ; Oscillator type
board_hardware.uart = no_bootloader  ; 
; board_hardware.uart = uart0        ; Set UART to use for serial upload
; board_bootloader.speed = 19200       ; Set bootloader baud rate
board_hardware.bod = 4.3v            ; Set brown-out detection 4.3v / 2.7v
board_hardware.eesave = no          ; Preserve EEPROM when uploading using programmer
upload_protocol = stk500v1             ; Use the USBasp as programmer   custom   usbasp
upload_flags =                       ; Select USB as upload port and divide the SPI clock by 8
  -v 
  -P/dev/cu.usbserial-141240
  -b19200
  -e

; avrdude -C avrdude.conf -p m328p -P usb -c usbasp -U eeprom:r:eeprom_dump.txt:r